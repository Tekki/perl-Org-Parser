#!/usr/bin/perl

# a simple example script to dump org structure

# workaround for dzil
package dump_org_structure;

use 5.010;
use strict;
use warnings;
use Log::Any qw($log);

use String::Escape qw(elide printable);
use Org::Parser;

my $doc = Org::Parser->new->parse([<>]);
dump_element($doc);

sub dump_element {
    my ($el, $indent_level) = @_;
    $indent_level //= 0;

    my $line = "  " x $indent_level;
    my $type = ref($el);
    $type =~ s/^Org::(?:Element::)?//;
    $line .= "$type:";
    # per-element important info
    if ($type eq 'Headline') {
        $line .= " l=".$el->level;
        $line .= ",todo=".$el->todo_state if $el->todo_state;
    } elsif ($type eq 'Footnote') {
        $line .= " name=".($el->name // "");
    } elsif ($type eq 'List') {
        $line .= " ".$el->type;
        $line .= "(".$el->bullet_style.")";
        $line .= " indent=".length($el->indent);
    } elsif ($type eq 'ListItem') {
        $line .= " ".$el->bullet;
        $line .= " [".$el->check_state."]" if $el->check_state;
    } elsif ($type eq 'Text') {
        #$line .= " mu_start" if $el->{_mu_start}; #TMP
        #$line .= " mu_end" if $el->{_mu_end}; #TMP
        $line .= " ".$el->style if $el->style;
    } elsif ($type eq 'Timestamp') {
        $line .= " A" if $el->is_active;
        $line .= " dt=".$el->datetime;
    } elsif ($type eq 'TimeRange') {
        $line .= " A" if $el->is_active;
        $line .= " dt1=".$el->datetime1;
        $line .= " dt2=".$el->datetime2;
    } elsif ($type eq 'Drawer') {
        $line .= " ".$el->name;
        $line .= " "._format_properties($el->properties)
            if $el->name eq 'PROPERTIES' && $el->properties;
    }
    unless ($el->children) {
        $line .= " \"". printable($el->_str // $el->as_string)."\"";
    }
    $line = elide($line, 80-length($line));
    say $line;

    if ($type eq 'Headline') {
        print "  " x ($indent_level+1), "(title)\n";
        dump_element($el->title, $indent_level+1);
        print "  " x ($indent_level+1), "(children)\n" if $el->children;
    } elsif ($type eq 'Footnote') {
        if ($el->def) {
            print "  " x ($indent_level+1), "(definition)\n";
            dump_element($el->def, $indent_level+1);
        }
        print "  " x ($indent_level+1), "(children)\n" if $el->children;
    } elsif ($type eq 'ListItem') {
        if ($el->desc_term) {
            print "  " x ($indent_level+1), "(description term)\n";
            dump_element($el->desc_term, $indent_level+1);
        }
        print "  " x ($indent_level+1), "(children)\n" if $el->children;
    }

    if ($el->children) {
        dump_element($_, $indent_level+1) for @{ $el->children };
    }
}

sub _format_properties {
    my ($props) = @_;
    #use Data::Dump::OneLine qw(dump1); return dump1($props);
    my @s;
    for my $k (sort keys %$props) {
        my $v = $props->{$k};
        if (ref($v) eq 'ARRAY') {
            $v = "[" . join(",", map {printable($_)} @$v). "]";
        } else {
            $v = printable($v);
        }
        push @s, "$k=$v";
    }
    "{" . join(", ", @s) . "}";
}
